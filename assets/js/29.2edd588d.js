(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{379:function(t,a,r){"use strict";r.r(a);var s=r(25),_=Object(s.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"数据结构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#数据结构"}},[t._v("#")]),t._v(" 数据结构")]),t._v(" "),r("h2",{attrs:{id:"_1-数据结构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-数据结构"}},[t._v("#")]),t._v(" 1. 数据结构")]),t._v(" "),r("p",[t._v("数据是一个抽象的概念，将其进行分类后得到程序设计语言中的基本类型。如：int，float，char等。数据元素之间不是独立的，存在特定的关系，这些关系便是结构。数据结构指数据对象中数据元素之间的关系。")]),t._v(" "),r("p",[t._v("Python给我们提供了很多现成的数据结构类型，这些系统自己定义好的，不需要我们自己去定义的数据结构叫做Python的内置数据结构，比如列表、元组、字典。而有些数据组织方式，Python系统里面没有直接定义，需要我们自己去定义实现这些数据的组织方式，这些数据组织方式称为Python的扩展数据结构，比如栈，队列等。")]),t._v(" "),r("h2",{attrs:{id:"_2-算法与数据结构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-算法与数据结构"}},[t._v("#")]),t._v(" 2. 算法与数据结构")]),t._v(" "),r("p",[t._v("数据结构只是静态的描述了数据元素之间的关系。高效的程序需要在数据结构的基础上设计和选择算法。")]),t._v(" "),r("p",[r("strong",[t._v("程序 = 数据结构 + 算法")])]),t._v(" "),r("p",[t._v("算法是为了解决实际问题而设计的，数据结构是算法需要处理的问题载体")]),t._v(" "),r("h2",{attrs:{id:"_3-抽象数据类型-adt"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-抽象数据类型-adt"}},[t._v("#")]),t._v(" 3. 抽象数据类型(ADT)")]),t._v(" "),r("p",[t._v("抽象数据类型(Abstract Data Type)的含义是指一个数学模型以及定义在此数学模型上的一组操作。即封装数据类型和数据类型上的运算。引入抽象数据类型的目的是把数据类型的表示和数据类型上运算的实现与这些数据类型和运算在程序中的引用隔开，使它们相互独立。类似于C#语言中接口的概念。")])])}),[],!1,null,null,null);a.default=_.exports}}]);