(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{378:function(t,s,a){"use strict";a.r(s);var n=a(25),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算法"}},[t._v("#")]),t._v(" 算法")]),t._v(" "),a("h2",{attrs:{id:"_1-算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-算法"}},[t._v("#")]),t._v(" 1. 算法")]),t._v(" "),a("p",[t._v("算法是独立存在的一种解决问题的方法和思想。算法是计算机处理信息的本质，因为计算机程序本质上是一个算法来告诉计算机确切的步骤来执行一个指定的任务。算法是一个庞杂的话题，我们这里只做一点最简单的探讨。")]),t._v(" "),a("p",[t._v("算法一般有以下五个特性：")]),t._v(" "),a("ul",[a("li",[t._v("输入。算法具有0个或多个输入")]),t._v(" "),a("li",[t._v("输出。算法至少有1个或多个输出")]),t._v(" "),a("li",[t._v("有穷性。 算法在有限的步骤之后会自动结束而不会无限循环，并且每一个步骤可以在可接受的时间内完成")]),t._v(" "),a("li",[t._v("确定性。算法中的每一步都有确定的含义，不会出现二义性")]),t._v(" "),a("li",[t._v("可行性。算法的每一步都是可行的，也就是说每一步都能够执行有限的次数完成")])]),t._v(" "),a("p",[t._v("算法的效率主要由以下两个复杂度来评估：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("时间复杂度")]),t._v("。评估执行程序所需的时间。可以估算出程序对处理器的使用程度。")]),t._v(" "),a("li",[a("strong",[t._v("空间复杂度")]),t._v("。 评估执行程序所需的存储空间。可以估算出程序对计算机内存的使用程度。")])]),t._v(" "),a("p",[t._v("设计算法时，一般是要先考虑系统环境，然后权衡时间复杂度和空间复杂度，选取一个平衡点。不过，时间复杂度要比空间复杂度更容易产生问题，因此算法研究的主要也是时间复杂度，不特别说明的情况下，复杂度就是指时间复杂度。")]),t._v(" "),a("h2",{attrs:{id:"_2-时间复杂度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-时间复杂度"}},[t._v("#")]),t._v(" 2. 时间复杂度")]),t._v(" "),a("p",[t._v("假定计算机执行算法每一个基本操作的时间是固定的一个时间单位，那么有多少个基本操作就代表会花费多少时间单位。算法执行时间可以在一个层面上反应出算法的效率。")]),t._v(" "),a("h3",{attrs:{id:"_2-1-时间频度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-时间频度"}},[t._v("#")]),t._v(" 2.1 时间频度")]),t._v(" "),a("p",[t._v("一个算法执行所耗费的时间，从理论上是不能算出来的，必须上机运行测试才能知道。但我们不可能也没有必要对每个算法都上机测试，一个算法花费的时间与算法中语句的执行次数成正比例，所以我们可以简单的使用算法中语句执行次数来衡量其执行时间。一个算法中的语句执行次数称为语句频度或时间频度，记为"),a("code",[t._v("T(n)")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language-py line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" j "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" k "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("k"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" m "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])]),a("p",[t._v("如上面这段代码，"),a("code",[t._v("T(n) = 2n"),a("sup",[t._v("2")]),t._v(" + 3n + 4")])]),t._v(" "),a("h3",{attrs:{id:"_2-2-时间复杂度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-时间复杂度"}},[t._v("#")]),t._v(" 2.2 时间复杂度")]),t._v(" "),a("p",[t._v("前面提到的时间频度"),a("code",[t._v("T(n)")]),t._v("中，n称为问题的规模，当n不断变化时，时间频度"),a("code",[t._v("T(n)")]),t._v("也会不断变化。一般情况下，算法中基本操作重复执行的次数是问题规模n的某个函数，用"),a("code",[t._v("T(n)")]),t._v("表示，若有某个辅助函数"),a("code",[t._v("f(n)")]),t._v("，使得当n趋近于无穷大时，"),a("code",[t._v("T(n)")]),t._v("/"),a("code",[t._v("f(n)")]),t._v("的极限值为不等于零的常数，则称"),a("code",[t._v("f(n)")]),t._v("是"),a("code",[t._v("T(n)")]),t._v("的同数量级函数，记作"),a("code",[t._v("T(n)=O(f(n))")]),t._v("，它称为算法的渐进时间复杂度，简称时间复杂度。")]),t._v(" "),a("p",[t._v("算法的时间复杂度有以下三种情况：")]),t._v(" "),a("ul",[a("li",[t._v("算法完成工作最少需要多少基本操作，即最优时间复杂度")]),t._v(" "),a("li",[t._v("算法完成工作最多需要多少基本操作，即最坏时间复杂度")]),t._v(" "),a("li",[t._v("算法完成工作平均需要多少基本操作，即平均时间复杂度")])]),t._v(" "),a("p",[t._v("对于最优时间复杂度，其价值不大，因为它没有提供什么有用信息，其反映的只是最乐观最理想的情况，没有参考价值。对于平均时间复杂度，是对算法的一个全面评价，因此它完整全面的反映了这个算法的性质。但另一方面，这种衡量并没有保证，不是每个计算都能在这个基本操作内完成。而且，对于平均情况的计算，也会因为应用算法的实例分布可能并不均匀而难以计算。最坏时间复杂度，则提供了一种保证，表明算法在此种程度的基本操作中一定能完成工作。因此，我们主要关注算法的最坏情况，我们提到的"),a("strong",[t._v("时间复杂度一般情况下指的就是最坏时间复杂度")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"_2-3-大o表示法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-大o表示法"}},[t._v("#")]),t._v(" 2.3 大O表示法")]),t._v(" "),a("p",[t._v("对于算法进行特别具体的细致分析虽然很好，但在实践中的实际价值有限。对于算法的时间性质和空间性质，最重要的是其数量级和趋势，这些是分析算法效率的主要部分。而计量算法基本操作数量的规模函数中那些常量因子可以忽略不计。例如，两个算法处理同样规模实例的代价分别为 3n"),a("sup",[t._v("2")]),t._v("和 100n"),a("sup",[t._v("2")]),t._v("，可以认为它们属于同一个量级，效率“差不多”，均为n "),a("sup",[t._v("2")]),t._v("级。判断一个算法的效率时，往往只需要关注操作数量的最高次幂项，其它次要项和常数项可以忽略。")]),t._v(" "),a("p",[a("code",[t._v("O(f(n))")]),t._v("记录算法复杂度的方式成为大O表示法")]),t._v(" "),a("p",[t._v("时间复杂度的有以下几条基本计算规则：")]),t._v(" "),a("ul",[a("li",[t._v("基本操作。即只有常数项，认为其时间复杂度为O(1)")]),t._v(" "),a("li",[t._v("顺序结构。时间复杂度按加法进行计算")]),t._v(" "),a("li",[t._v("循环结构。时间复杂度按乘法进行计算")]),t._v(" "),a("li",[t._v("分支结构。时间复杂度取分支最大值")])]),t._v(" "),a("h3",{attrs:{id:"_2-4-常见时间复杂度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-常见时间复杂度"}},[t._v("#")]),t._v(" 2.4 常见时间复杂度")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("执行次数函数举例")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("量级")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("非正式术语")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("12")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("O(1)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("常数阶")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("2n+3")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("O(n)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("线性阶")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("3n"),a("sup",[t._v("2")]),t._v("+2n+1")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("O(n"),a("sup",[t._v("2")]),t._v(")")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("平方阶")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("6n"),a("sup",[t._v("3")]),t._v("+2n2+3n+4")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("O(n"),a("sup",[t._v("3")]),t._v(")")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("立方阶")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("2"),a("sup",[t._v("n")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("O(2"),a("sup",[t._v("n")]),t._v(")")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("指数阶")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("5log"),a("sub",[t._v("2")]),t._v("n+20")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("O(logn)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("对数阶")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("2n+3nlog"),a("sub",[t._v("2")]),t._v("n+19")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("O(nlogn)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("nlogn阶")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("2n!+3")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("O(n!)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("阶乘阶")])])])]),t._v(" "),a("ul",[a("li",[a("small",[t._v("常将log"),a("sub",[t._v("2")]),t._v("n(以2为底n的对数)简写成logn")])])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://i.loli.net/2020/02/25/1tImyapEX9e3dOS.jpg",alt:"算法时间复杂度对比图"}})]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("常见时间复杂度效率排序如下")]),t._v(" "),a("p",[t._v("O(1) > O(logn) > O(n) > O(nlogn) > O(n"),a("sup",[t._v("2")]),t._v(") > O(n"),a("sup",[t._v("3")]),t._v(") > O(2"),a("sup",[t._v("n")]),t._v(") > O(n!) > O(n"),a("sup",[t._v("n")]),t._v(")")])]),t._v(" "),a("h2",{attrs:{id:"_3-timeit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-timeit"}},[t._v("#")]),t._v(" 3. timeit")]),t._v(" "),a("p",[a("code",[t._v("timeit")]),t._v("模块的"),a("code",[t._v("Timer")]),t._v("类封装了用来测试代码的执行时间的方法。")]),t._v(" "),a("p",[a("code",[t._v("Timer(stmt='pass', setup='pass', timer=<timer function>)")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("stmt")]),t._v("是要测试的代码语句(statment)。")]),t._v(" "),a("li",[a("code",[t._v("setup")]),t._v("是运行代码时需要的配置，如导入相应模块等")]),t._v(" "),a("li",[a("code",[t._v("timer")]),t._v("是一个定时器函数，与平台有关")])]),t._v(" "),a("p",[a("code",[t._v("Timer.timeit([number=1000000])")]),t._v("方法测算并返回代码执行时间，number参数指定执行次数，默认为100万次。")]),t._v(" "),a("div",{staticClass:"language-py line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" timeit "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" Timer\n\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fun")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    lst "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("list")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\ntimer "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Timer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fun()"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"from __main__ import fun"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("timer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("timeit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 计算fun函数执行1W次的耗时 ")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])])])}),[],!1,null,null,null);s.default=e.exports}}]);