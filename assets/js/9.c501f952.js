(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{359:function(t,s,a){"use strict";a.r(s);var e=a(25),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据类型"}},[t._v("#")]),t._v(" 数据类型")]),t._v(" "),a("h2",{attrs:{id:"_1-数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-数据类型"}},[t._v("#")]),t._v(" 1. 数据类型")]),t._v(" "),a("p",[t._v("Python中主要包含以下数据类型：")]),t._v(" "),a("ul",[a("li",[t._v("数字型\n"),a("ul",[a("li",[t._v("整型(int)")]),t._v(" "),a("li",[t._v("浮点型(float)")]),t._v(" "),a("li",[t._v("布尔型(bool)  Python中布尔型于C语言的"),a("code",[t._v("真假")]),t._v("类似，0 为False，非0 为Ture")]),t._v(" "),a("li",[t._v("复数型(complex)")])])]),t._v(" "),a("li",[t._v("非数字类型\n"),a("ul",[a("li",[t._v("字符串(str)")]),t._v(" "),a("li",[t._v("列表")]),t._v(" "),a("li",[t._v("元组")]),t._v(" "),a("li",[t._v("字典")])])])]),t._v(" "),a("div",{staticClass:"language-py line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 多变量赋值的两种方式")]),t._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("   \na"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" d "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.14")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("ul",[a("li",[t._v("Python2.x中整数根据长度分为 int(整型) 和 long(长整型)类型")]),t._v(" "),a("li",[t._v("Python在定义变量的时不需要指定变量类型。程序运行时解释器会自动根据变量内容推断数据类型。")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("type 查看数据类型")]),t._v(" "),a("p",[a("RouterLink",{attrs:{to:"/senior/metaclass.html#_2-type-类"}},[t._v("type(object)")]),t._v(" 可以查看对象数据类型。type(123) -> int。其实返回的对象的"),a("code",[t._v("__class__")]),t._v("属性。")],1)]),t._v(" "),a("div",{staticClass:"language-py line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[t._v("d "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("type")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("d"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# int")]),t._v("\nd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__class__  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# int")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("h2",{attrs:{id:"_2-数据类型转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-数据类型转换"}},[t._v("#")]),t._v(" 2. 数据类型转换")]),t._v(" "),a("ul",[a("li",[t._v("不同类型的数字在进行混合运算时，整数将会转换成浮点数进行运算")]),t._v(" "),a("li",[t._v("bool类型在与数字类型运算时，True为1,False为0")]),t._v(" "),a("li",[t._v("字符串类型能直接于数字类型运算")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("函数")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("int(x [,base ])")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("将x转换为一个整数")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("float(x )")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("将x转换为一个浮点数")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("complex(real [,imag ])")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("创建一个复数，real为实部，imag为虚部")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("str(x )")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("将对象 x 转换为字符串")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("repr(x )")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("将对象 x 转换为表达式字符串")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("strong",[t._v("eval(str )")])]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("将字符串形式的数据，转换为原本的类型")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("tuple(s )")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("将序列 s 转换为一个元组")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("list(s )")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("将序列 s 转换为一个列表")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("chr(x )")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("将一个整数转换为一个Unicode字符")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("ord(x )")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("将一个字符转换为它的ASCII整数值")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("hex(x )")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("将一个整数转换为一个十六进制字符串")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("oct(x )")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("将一个整数转换为一个八进制字符串")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("bin(x )")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("将一个整数转换为一个二进制字符串")])])])]),t._v(" "),a("h2",{attrs:{id:"_3-对象引用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-对象引用"}},[t._v("#")]),t._v(" 3. 对象引用")]),t._v(" "),a("p",[t._v("与C#等强类型语言不同，Python没有值类型，只有引用类型。所有类型数据都存储在堆内存中，而变量则存储于栈内存中指向堆内存地址，"),a("strong",[t._v("变量的本质是一个指针")]),t._v("，这也是为什么一个变量可以赋值任何数据类型，其背后只是修改了变量指向的内存地址而已。")]),t._v(" "),a("p",[t._v("Python中一个赋值语句的执行过程如下，如 "),a("code",[t._v("a = 500")]),t._v(":")]),t._v(" "),a("ul",[a("li",[t._v("先执行等号右边的内容。向系统申请一块内存存储500")]),t._v(" "),a("li",[t._v("将变量a指向刚上一步申请的内存地址")])]),t._v(" "),a("p",[a("code",[t._v("id()")]),t._v("函数可以查看对象唯一地址标识，CPython中其表示对象内存地址。Python提供了"),a("code",[t._v("is")]),t._v("和"),a("code",[t._v("is not")]),t._v("操作符来测试两个变量是否指向同一个地址。")]),t._v(" "),a("div",{staticClass:"language-py line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 开辟堆内存空间存储10，并将变量名a指向堆内存地址")]),t._v("\nb "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将a指向的堆内存地址赋值给b，此时b与a指向同一个地址")]),t._v("\na "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("is")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# True")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# True")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("ul",[a("li",[a("code",[t._v("==")]),t._v(" 验证内容是否相同")]),t._v(" "),a("li",[a("code",[t._v("is")]),t._v(" 验证地址是否相同")])]),t._v(" "),a("p",[a("code",[t._v("a is b")]),t._v("等价与"),a("code",[t._v("id(a) == id(b)")]),t._v("。")]),t._v(" "),a("p",[t._v("出于内存优化考虑，[-5,256]之间的小整数,单个字符,相同字符串\b,三种变量的引用比较特殊,具体可参阅"),a("RouterLink",{attrs:{to:"/senior/intern.html"}},[t._v("对象池与intern")]),t._v("。")],1),t._v(" "),a("h2",{attrs:{id:"_4-可变类型-不可变类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-可变类型-不可变类型"}},[t._v("#")]),t._v(" 4. 可变类型/不可变类型")]),t._v(" "),a("p",[t._v("可变类型指声明之后可以修改的数据类型，不可变类型则相反。Python中"),a("strong",[t._v("只有列表和字典是可变类型。")])]),t._v(" "),a("p",[t._v("由于Pyton的地址引用，可变类型内容修改后，所有指向它的变量都会同步修改，由此可变类型可以实现C#等语言当中引用地址传递的效果。")]),t._v(" "),a("p",[t._v("不可变类型内容声明后不能修改，对变量的赋新值则会开辟新的堆内存以存储新值并将变量名指向新的地址，而之前堆内存中存储的数据并没有改变。由此不可变类型可以实现C#等语言值传递的效果。当旧的堆内存地址没有任何变量指向时，会被"),a("RouterLink",{attrs:{to:"/senior/gc.html"}},[t._v("GC")]),t._v("并释放内存。")],1),t._v(" "),a("div",{staticClass:"language-py line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\nb "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 此时b指向与a相同的存储10的内存地址")]),t._v("\nb "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# int为不可变类型，赋值20会开辟新内存存储20并将其新地址赋值给b")]),t._v("\nb "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("is")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# False  a指向存储10的内存地址，b指向存储20的内存地址")]),t._v("\n\nlst1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nlst2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" list1   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# list2与list1指向同一内存地址")]),t._v("\nlst2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 列表为可变类型，修改会直接在实际数据存储的堆内存中进行，所有指向此地址的变量都会取到修改后的值")]),t._v("\nlst2 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("is")]),t._v(" lst1  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# True list1和list2指向内存地址未发生变化，两者依然相同")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])])])}),[],!1,null,null,null);s.default=n.exports}}]);